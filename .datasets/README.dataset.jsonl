{"instruction":"How to install with npm?","output":"```bash\nnpm install @nan0web/http\n```\n","context":["h1:@nan0web/http","h2:Installation"],"input":"## Installation\n\n","tags":["@nan0web/http","Installation"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to install with pnpm?","output":"```bash\npnpm add @nan0web/http\n```\n","context":["h1:@nan0web/http","h2:Installation"],"input":"## Installation\n\n","tags":["@nan0web/http","Installation"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to install with yarn?","output":"```bash\nyarn add @nan0web/http\n```\n","context":["h1:@nan0web/http","h2:Installation"],"input":"## Installation\n\n","tags":["@nan0web/http","Installation"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to get HTTP status text by code?","output":"```js\nimport { HTTPStatusCode } from '@nan0web/http'\nconsole.info(HTTPStatusCode.get(200)) // OK\nconsole.info(HTTPStatusCode.get(404)) // Not Found\nconsole.info(HTTPStatusCode.get(418)) // I'm a teapot (RFC 2324)\n```\n","context":["h1:@nan0web/http","h2:Usage","h3:HTTP Status Codes"],"input":"### HTTP Status Codes\n\nA dictionary of HTTP status codes and their descriptions.\n\n","tags":["@nan0web/http","Usage","HTTP Status Codes"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to create an HTTPError instance?","output":"```js\nimport { HTTPError } from '@nan0web/http'\ntry {\n\tthrow new HTTPError(\"Bad Request\", 400)\n} catch (/** @type {any} */ error) {\n\tconsole.info(error.toString()) // HTTPError [400] Bad Request\\n<stack trace>\n}\n```\n","context":["h1:@nan0web/http","h2:Usage","h3:HTTP Errors"],"input":"### HTTP Errors\n\nCustom error classes for HTTP-related errors.\n\n","tags":["@nan0web/http","Usage","HTTP Errors"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to create an AbortError instance?","output":"```js\nimport { AbortError } from '@nan0web/http'\ntry {\n\tthrow new AbortError(\"Request was cancelled by user\")\n} catch (/** @type {any} */ error) {\n\tconsole.info(error.name) // AbortError\n\tconsole.info(error.message) // Request was cancelled by user\n}\n```\n","context":["h1:@nan0web/http","h2:Usage","h3:HTTP Errors"],"input":"### HTTP Errors\n\nCustom error classes for HTTP-related errors.\n\n","tags":["@nan0web/http","Usage","HTTP Errors"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to create HTTPHeaders from object?","output":"```js\nimport { HTTPHeaders } from '@nan0web/http'\nconst headers = new HTTPHeaders({\n\t\"Content-Type\": \"application/json\",\n\t\"Authorization\": \"Bearer secret-token\",\n\t\"User-Agent\": \"nan0web-http-client/1.0\"\n})\nconsole.info(headers.toString())\n// Content-Type: application/json\n// Authorization: Bearer secret-token\n// User-Agent: nan0web-http-client/1.0\n```\n","context":["h1:@nan0web/http","h2:Usage","h3:HTTP Headers"],"input":"### HTTP Headers\n\nA class for managing HTTP headers that supports multiple input formats.\n\n","tags":["@nan0web/http","Usage","HTTP Headers"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to create HTTPHeaders from array?","output":"```js\nimport { HTTPHeaders } from '@nan0web/http'\nconst headers = new HTTPHeaders([\n\t[\"accept\", \"application/json\"],\n\t[\"x-api-key\", \"key123\"]\n])\nconsole.info(headers.toString()) // Accept: application/json\\nX-Api-Key: key123\n```\n","context":["h1:@nan0web/http","h2:Usage","h3:HTTP Headers"],"input":"### HTTP Headers\n\nA class for managing HTTP headers that supports multiple input formats.\n\n","tags":["@nan0web/http","Usage","HTTP Headers"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to create HTTPHeaders from string?","output":"```js\nimport { HTTPHeaders } from '@nan0web/http'\nconst headers = new HTTPHeaders(\n\t\"Content-Type: text/html\\nX-Request-ID: abc123\"\n)\nconsole.info(headers.toString()) // Content-Type: text/html\\nX-Request-ID: abc123\n```\n","context":["h1:@nan0web/http","h2:Usage","h3:HTTP Headers"],"input":"### HTTP Headers\n\nA class for managing HTTP headers that supports multiple input formats.\n\n","tags":["@nan0web/http","Usage","HTTP Headers"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to manipulate HTTPHeaders?","output":"```js\nimport { HTTPHeaders } from '@nan0web/http'\nconst headers = new HTTPHeaders()\nheaders.set(\"Cache-Control\", \"no-cache\")\nheaders.set(\"Accept-Language\", \"en-US,en;q=0.9\")\nconsole.info(headers.size) // 2\nconsole.info(headers.has(\"Cache-Control\")) // true\nconsole.info(headers.get(\"Cache-Control\")) // no-cache\nconsole.info(JSON.stringify(headers.toObject(), null, 2))\n// {\n//   \"Cache-Control\": \"no-cache\",\n//   \"Accept-Language\": \"en-US,en;q=0.9\"\n// }\n```\n","context":["h1:@nan0web/http","h2:Usage","h3:HTTP Headers"],"input":"### HTTP Headers\n\nA class for managing HTTP headers that supports multiple input formats.\n\n","tags":["@nan0web/http","Usage","HTTP Headers"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to create an HTTPMessage instance?","output":"```js\nimport { HTTPMessage } from '@nan0web/http'\nconst message = new HTTPMessage({\n\turl: \"/api/test\",\n\theaders: {\n\t\t\"Content-Type\": \"application/json\"\n\t},\n\tbody: '{\"test\": true}'\n})\nconsole.info(message.toString())\n// </api/test>\n// Content-Type: application/json\n\n// {\"test\": true}\n```\n","context":["h1:@nan0web/http","h2:Usage","h3:HTTP Message"],"input":"### HTTP Message\n\nBase class for HTTP messages with URL, headers, and optional body.\n\n","tags":["@nan0web/http","Usage","HTTP Message"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to create an HTTPIncomingMessage instance?","output":"```js\nimport { HTTPIncomingMessage } from '@nan0web/http'\nconst getRequest = new HTTPIncomingMessage({\n\tmethod: \"GET\",\n\turl: \"/api/users\",\n\theaders: {\n\t\t\"Accept\": \"application/json\",\n\t\t\"User-Agent\": \"nan0web-client/1.0\"\n\t}\n})\nconsole.info(getRequest.toString())\n// GET </api/users>\n// Accept: application/json\n// User-Agent: nan0web-client/1.0\n```\n","context":["h1:@nan0web/http","h2:Usage","h3:HTTP Incoming Message"],"input":"### HTTP Incoming Message\n\nExtends HTTPMessage to represent client requests with methods.\n\n","tags":["@nan0web/http","Usage","HTTP Incoming Message"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to validate HTTP methods?","output":"```js\nimport { HTTPMethodValidator } from '@nan0web/http'\nconsole.info(HTTPMethodValidator(\"GET\")) // GET\nconsole.info(HTTPMethodValidator(\"INVALID\")) // throws TypeError\n```\n","context":["h1:@nan0web/http","h2:Usage","h3:HTTP Incoming Message"],"input":"### HTTP Incoming Message\n\nExtends HTTPMessage to represent client requests with methods.\n\n","tags":["@nan0web/http","Usage","HTTP Incoming Message"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to create an HTTPResponseMessage instance?","output":"```js\nimport { HTTPResponseMessage } from '@nan0web/http'\nconst successResponse = new HTTPResponseMessage({\n\turl: \"/api/users\",\n\tstatus: 200,\n\tstatusText: \"OK\",\n\tok: true,\n\theaders: {\n\t\t\"Content-Type\": \"application/json\",\n\t\t\"X-Response-Time\": \"45ms\"\n\t},\n\tbody: JSON.stringify([{ id: 1, name: \"John\" }, { id: 2, name: \"Jane\" }])\n})\nconsole.info(successResponse.status) // 200\nconsole.info(successResponse.statusText) // OK\nconsole.info(successResponse.ok) // true\nconsole.info(await successResponse.text()) // [{\"id\":1,\"name\":\"John\"},{\"id\":2,\"name\":\"Jane\"}]\n```\n","context":["h1:@nan0web/http","h2:Usage","h3:HTTP Response Message"],"input":"### HTTP Response Message\n\nExtends HTTPMessage to represent server responses with status information.\n\n","tags":["@nan0web/http","Usage","HTTP Response Message"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to clone an HTTPResponseMessage instance?","output":"```js\nimport { HTTPResponseMessage } from '@nan0web/http'\nconst original = new HTTPResponseMessage({\n\turl: \"/api/data\",\n\tstatus: 200,\n\tbody: \"Hello world\"\n})\nconst cloned = original.clone()\nconsole.info(original.url) // /api/data\nconsole.info(cloned.url) // /api/data\nconsole.info(await original.text() === await cloned.text()) // true\n```\n","context":["h1:@nan0web/http","h2:Usage","h3:HTTP Response Message"],"input":"### HTTP Response Message\n\nExtends HTTPMessage to represent server responses with status information.\n\n","tags":["@nan0web/http","Usage","HTTP Response Message"],"proven":"assert-in-@nan0web/http"}
{"instruction":"How to run playground script?","output":"```bash\n# Clone the repository and run the CLI playground\ngit clone https://github.com/nan0web/http.git\ncd http\nnpm install\nnpm run play\n```\n","context":["h1:@nan0web/http","h2:CLI Playground"],"input":"## CLI Playground\n\n","tags":["@nan0web/http","CLI Playground"],"proven":"assert-in-@nan0web/http"}